// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_provider.proto

#ifndef PROTOBUF_content_5fprovider_2eproto__INCLUDED
#define PROTOBUF_content_5fprovider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_content_5fprovider_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequest_ValuesEntry_DoNotUseImpl();
void InitDefaultsRequest_ValuesEntry_DoNotUse();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsRequest_ValuesEntry_DoNotUse();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_content_5fprovider_2eproto
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_ValuesEntry_DoNotUse;
class Request_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Request_ValuesEntry_DoNotUseDefaultTypeInternal _Request_ValuesEntry_DoNotUse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;

enum Request_Method {
  Request_Method_delete_ = 0,
  Request_Method_getType = 1,
  Request_Method_insert = 2,
  Request_Method_query = 3,
  Request_Method_update = 4,
  Request_Method_Request_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_Method_Request_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_Method_IsValid(int value);
const Request_Method Request_Method_Method_MIN = Request_Method_delete_;
const Request_Method Request_Method_Method_MAX = Request_Method_update;
const int Request_Method_Method_ARRAYSIZE = Request_Method_Method_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Method_descriptor();
inline const ::std::string& Request_Method_Name(Request_Method value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Method_descriptor(), value);
}
inline bool Request_Method_Parse(
    const ::std::string& name, Request_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Method>(
    Request_Method_descriptor(), name, value);
}
enum Response_Status {
  Response_Status_Ok = 0,
  Response_Status_UriNotFound = 1,
  Response_Status_MethodNotFound = 2,
  Response_Status_PermissionNotAllowed = 3,
  Response_Status_UnknownError = 4,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_Status_IsValid(int value);
const Response_Status Response_Status_Status_MIN = Response_Status_Ok;
const Response_Status Response_Status_Status_MAX = Response_Status_UnknownError;
const int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor();
inline const ::std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Status_descriptor(), value);
}
inline bool Response_Status_Parse(
    const ::std::string& name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class Request_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Request_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Request_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Request_ValuesEntry_DoNotUse();
  Request_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Request_ValuesEntry_DoNotUse& other);
  static const Request_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Request_ValuesEntry_DoNotUse*>(&_Request_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef Request_Method Method;
  static const Method delete_ =
    Request_Method_delete_;
  static const Method getType =
    Request_Method_getType;
  static const Method insert =
    Request_Method_insert;
  static const Method query =
    Request_Method_query;
  static const Method update =
    Request_Method_update;
  static inline bool Method_IsValid(int value) {
    return Request_Method_IsValid(value);
  }
  static const Method Method_MIN =
    Request_Method_Method_MIN;
  static const Method Method_MAX =
    Request_Method_Method_MAX;
  static const int Method_ARRAYSIZE =
    Request_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Method_descriptor() {
    return Request_Method_descriptor();
  }
  static inline const ::std::string& Method_Name(Method value) {
    return Request_Method_Name(value);
  }
  static inline bool Method_Parse(const ::std::string& name,
      Method* value) {
    return Request_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string selectionArgs = 5;
  int selectionargs_size() const;
  void clear_selectionargs();
  static const int kSelectionArgsFieldNumber = 5;
  const ::std::string& selectionargs(int index) const;
  ::std::string* mutable_selectionargs(int index);
  void set_selectionargs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_selectionargs(int index, ::std::string&& value);
  #endif
  void set_selectionargs(int index, const char* value);
  void set_selectionargs(int index, const char* value, size_t size);
  ::std::string* add_selectionargs();
  void add_selectionargs(const ::std::string& value);
  #if LANG_CXX11
  void add_selectionargs(::std::string&& value);
  #endif
  void add_selectionargs(const char* value);
  void add_selectionargs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& selectionargs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_selectionargs();

  // map<string, string> values = 6;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // repeated string projection = 7;
  int projection_size() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 7;
  const ::std::string& projection(int index) const;
  ::std::string* mutable_projection(int index);
  void set_projection(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_projection(int index, ::std::string&& value);
  #endif
  void set_projection(int index, const char* value);
  void set_projection(int index, const char* value, size_t size);
  ::std::string* add_projection();
  void add_projection(const ::std::string& value);
  #if LANG_CXX11
  void add_projection(::std::string&& value);
  #endif
  void add_projection(const char* value);
  void add_projection(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& projection() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_projection();

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string uri = 3;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string selection = 4;
  void clear_selection();
  static const int kSelectionFieldNumber = 4;
  const ::std::string& selection() const;
  void set_selection(const ::std::string& value);
  #if LANG_CXX11
  void set_selection(::std::string&& value);
  #endif
  void set_selection(const char* value);
  void set_selection(const char* value, size_t size);
  ::std::string* mutable_selection();
  ::std::string* release_selection();
  void set_allocated_selection(::std::string* selection);

  // string sortOrder = 8;
  void clear_sortorder();
  static const int kSortOrderFieldNumber = 8;
  const ::std::string& sortorder() const;
  void set_sortorder(const ::std::string& value);
  #if LANG_CXX11
  void set_sortorder(::std::string&& value);
  #endif
  void set_sortorder(const char* value);
  void set_sortorder(const char* value, size_t size);
  ::std::string* mutable_sortorder();
  ::std::string* release_sortorder();
  void set_allocated_sortorder(::std::string* sortorder);

  // .Request.Method method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  ::Request_Method method() const;
  void set_method(::Request_Method value);

  // @@protoc_insertion_point(class_scope:Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> selectionargs_;
  ::google::protobuf::internal::MapField<
      Request_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > values_;
  ::google::protobuf::RepeatedPtrField< ::std::string> projection_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr selection_;
  ::google::protobuf::internal::ArenaStringPtr sortorder_;
  int method_;
  mutable int _cached_size_;
  friend struct ::protobuf_content_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_content_5fprovider_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static const Status Ok =
    Response_Status_Ok;
  static const Status UriNotFound =
    Response_Status_UriNotFound;
  static const Status MethodNotFound =
    Response_Status_MethodNotFound;
  static const Status PermissionNotAllowed =
    Response_Status_PermissionNotAllowed;
  static const Status UnknownError =
    Response_Status_UnknownError;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Response_Status_Status_MIN;
  static const Status Status_MAX =
    Response_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string stringResult = 4;
  void clear_stringresult();
  static const int kStringResultFieldNumber = 4;
  const ::std::string& stringresult() const;
  void set_stringresult(const ::std::string& value);
  #if LANG_CXX11
  void set_stringresult(::std::string&& value);
  #endif
  void set_stringresult(const char* value);
  void set_stringresult(const char* value, size_t size);
  ::std::string* mutable_stringresult();
  ::std::string* release_stringresult();
  void set_allocated_stringresult(::std::string* stringresult);

  // .Response.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::Response_Status status() const;
  void set_status(::Response_Status value);

  // int32 intResult = 3;
  void clear_intresult();
  static const int kIntResultFieldNumber = 3;
  ::google::protobuf::int32 intresult() const;
  void set_intresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr stringresult_;
  int status_;
  ::google::protobuf::int32 intresult_;
  mutable int _cached_size_;
  friend struct ::protobuf_content_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_content_5fprovider_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// string uuid = 1;
inline void Request::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::uuid() const {
  // @@protoc_insertion_point(field_get:Request.uuid)
  return uuid_.GetNoArena();
}
inline void Request::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.uuid)
}
#if LANG_CXX11
inline void Request::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.uuid)
}
#endif
inline void Request::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.uuid)
}
inline void Request::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.uuid)
}
inline ::std::string* Request::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Request.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_uuid() {
  // @@protoc_insertion_point(field_release:Request.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Request.uuid)
}

// .Request.Method method = 2;
inline void Request::clear_method() {
  method_ = 0;
}
inline ::Request_Method Request::method() const {
  // @@protoc_insertion_point(field_get:Request.method)
  return static_cast< ::Request_Method >(method_);
}
inline void Request::set_method(::Request_Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:Request.method)
}

// string uri = 3;
inline void Request::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::uri() const {
  // @@protoc_insertion_point(field_get:Request.uri)
  return uri_.GetNoArena();
}
inline void Request::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.uri)
}
#if LANG_CXX11
inline void Request::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.uri)
}
#endif
inline void Request::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.uri)
}
inline void Request::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.uri)
}
inline ::std::string* Request::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:Request.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_uri() {
  // @@protoc_insertion_point(field_release:Request.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:Request.uri)
}

// string selection = 4;
inline void Request::clear_selection() {
  selection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::selection() const {
  // @@protoc_insertion_point(field_get:Request.selection)
  return selection_.GetNoArena();
}
inline void Request::set_selection(const ::std::string& value) {
  
  selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.selection)
}
#if LANG_CXX11
inline void Request::set_selection(::std::string&& value) {
  
  selection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.selection)
}
#endif
inline void Request::set_selection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.selection)
}
inline void Request::set_selection(const char* value, size_t size) {
  
  selection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.selection)
}
inline ::std::string* Request::mutable_selection() {
  
  // @@protoc_insertion_point(field_mutable:Request.selection)
  return selection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_selection() {
  // @@protoc_insertion_point(field_release:Request.selection)
  
  return selection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_selection(::std::string* selection) {
  if (selection != NULL) {
    
  } else {
    
  }
  selection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selection);
  // @@protoc_insertion_point(field_set_allocated:Request.selection)
}

// repeated string selectionArgs = 5;
inline int Request::selectionargs_size() const {
  return selectionargs_.size();
}
inline void Request::clear_selectionargs() {
  selectionargs_.Clear();
}
inline const ::std::string& Request::selectionargs(int index) const {
  // @@protoc_insertion_point(field_get:Request.selectionArgs)
  return selectionargs_.Get(index);
}
inline ::std::string* Request::mutable_selectionargs(int index) {
  // @@protoc_insertion_point(field_mutable:Request.selectionArgs)
  return selectionargs_.Mutable(index);
}
inline void Request::set_selectionargs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Request.selectionArgs)
  selectionargs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_selectionargs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Request.selectionArgs)
  selectionargs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_selectionargs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  selectionargs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.selectionArgs)
}
inline void Request::set_selectionargs(int index, const char* value, size_t size) {
  selectionargs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.selectionArgs)
}
inline ::std::string* Request::add_selectionargs() {
  // @@protoc_insertion_point(field_add_mutable:Request.selectionArgs)
  return selectionargs_.Add();
}
inline void Request::add_selectionargs(const ::std::string& value) {
  selectionargs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Request.selectionArgs)
}
#if LANG_CXX11
inline void Request::add_selectionargs(::std::string&& value) {
  selectionargs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Request.selectionArgs)
}
#endif
inline void Request::add_selectionargs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  selectionargs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Request.selectionArgs)
}
inline void Request::add_selectionargs(const char* value, size_t size) {
  selectionargs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Request.selectionArgs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::selectionargs() const {
  // @@protoc_insertion_point(field_list:Request.selectionArgs)
  return selectionargs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_selectionargs() {
  // @@protoc_insertion_point(field_mutable_list:Request.selectionArgs)
  return &selectionargs_;
}

// map<string, string> values = 6;
inline int Request::values_size() const {
  return values_.size();
}
inline void Request::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Request::values() const {
  // @@protoc_insertion_point(field_map:Request.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Request::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Request.values)
  return values_.MutableMap();
}

// repeated string projection = 7;
inline int Request::projection_size() const {
  return projection_.size();
}
inline void Request::clear_projection() {
  projection_.Clear();
}
inline const ::std::string& Request::projection(int index) const {
  // @@protoc_insertion_point(field_get:Request.projection)
  return projection_.Get(index);
}
inline ::std::string* Request::mutable_projection(int index) {
  // @@protoc_insertion_point(field_mutable:Request.projection)
  return projection_.Mutable(index);
}
inline void Request::set_projection(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Request.projection)
  projection_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_projection(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Request.projection)
  projection_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_projection(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  projection_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Request.projection)
}
inline void Request::set_projection(int index, const char* value, size_t size) {
  projection_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Request.projection)
}
inline ::std::string* Request::add_projection() {
  // @@protoc_insertion_point(field_add_mutable:Request.projection)
  return projection_.Add();
}
inline void Request::add_projection(const ::std::string& value) {
  projection_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Request.projection)
}
#if LANG_CXX11
inline void Request::add_projection(::std::string&& value) {
  projection_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Request.projection)
}
#endif
inline void Request::add_projection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  projection_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Request.projection)
}
inline void Request::add_projection(const char* value, size_t size) {
  projection_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Request.projection)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::projection() const {
  // @@protoc_insertion_point(field_list:Request.projection)
  return projection_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:Request.projection)
  return &projection_;
}

// string sortOrder = 8;
inline void Request::clear_sortorder() {
  sortorder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::sortorder() const {
  // @@protoc_insertion_point(field_get:Request.sortOrder)
  return sortorder_.GetNoArena();
}
inline void Request::set_sortorder(const ::std::string& value) {
  
  sortorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Request.sortOrder)
}
#if LANG_CXX11
inline void Request::set_sortorder(::std::string&& value) {
  
  sortorder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.sortOrder)
}
#endif
inline void Request::set_sortorder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sortorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.sortOrder)
}
inline void Request::set_sortorder(const char* value, size_t size) {
  
  sortorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.sortOrder)
}
inline ::std::string* Request::mutable_sortorder() {
  
  // @@protoc_insertion_point(field_mutable:Request.sortOrder)
  return sortorder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_sortorder() {
  // @@protoc_insertion_point(field_release:Request.sortOrder)
  
  return sortorder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_sortorder(::std::string* sortorder) {
  if (sortorder != NULL) {
    
  } else {
    
  }
  sortorder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sortorder);
  // @@protoc_insertion_point(field_set_allocated:Request.sortOrder)
}

// -------------------------------------------------------------------

// Response

// string uuid = 1;
inline void Response::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::uuid() const {
  // @@protoc_insertion_point(field_get:Response.uuid)
  return uuid_.GetNoArena();
}
inline void Response::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Response.uuid)
}
#if LANG_CXX11
inline void Response::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Response.uuid)
}
#endif
inline void Response::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Response.uuid)
}
inline void Response::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Response.uuid)
}
inline ::std::string* Response::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Response.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_uuid() {
  // @@protoc_insertion_point(field_release:Response.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Response.uuid)
}

// .Response.Status status = 2;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:Response.status)
  return static_cast< ::Response_Status >(status_);
}
inline void Response::set_status(::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Response.status)
}

// int32 intResult = 3;
inline void Response::clear_intresult() {
  intresult_ = 0;
}
inline ::google::protobuf::int32 Response::intresult() const {
  // @@protoc_insertion_point(field_get:Response.intResult)
  return intresult_;
}
inline void Response::set_intresult(::google::protobuf::int32 value) {
  
  intresult_ = value;
  // @@protoc_insertion_point(field_set:Response.intResult)
}

// string stringResult = 4;
inline void Response::clear_stringresult() {
  stringresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::stringresult() const {
  // @@protoc_insertion_point(field_get:Response.stringResult)
  return stringresult_.GetNoArena();
}
inline void Response::set_stringresult(const ::std::string& value) {
  
  stringresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Response.stringResult)
}
#if LANG_CXX11
inline void Response::set_stringresult(::std::string&& value) {
  
  stringresult_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Response.stringResult)
}
#endif
inline void Response::set_stringresult(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stringresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Response.stringResult)
}
inline void Response::set_stringresult(const char* value, size_t size) {
  
  stringresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Response.stringResult)
}
inline ::std::string* Response::mutable_stringresult() {
  
  // @@protoc_insertion_point(field_mutable:Response.stringResult)
  return stringresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_stringresult() {
  // @@protoc_insertion_point(field_release:Response.stringResult)
  
  return stringresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_stringresult(::std::string* stringresult) {
  if (stringresult != NULL) {
    
  } else {
    
  }
  stringresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringresult);
  // @@protoc_insertion_point(field_set_allocated:Response.stringResult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Request_Method> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Request_Method>() {
  return ::Request_Method_descriptor();
}
template <> struct is_proto_enum< ::Response_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Response_Status>() {
  return ::Response_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_5fprovider_2eproto__INCLUDED
